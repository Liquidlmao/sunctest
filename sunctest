-- this sadly has to replicate the real sunc test, due to his faulty script detecting functions as fake even if implemented as real, here showing what it should really be --

local total_time = 0





local function lg(seconds)
    local startTime = os.clock()
    while os.clock() - startTime < seconds do
        -- Perform a busy-wait loop to consume CPU cycles
        for i = 1, 1e6 do
            local _ = math.sqrt(i) 
        end
    end

end


local function stutter(seconds)
    local startTime = os.clock()
    while os.clock() - startTime < seconds do
        -- Perform a burst of CPU-intensive operations
        for i = 1, 1e6 do
            local _ = math.sin(i) -- Arbitrary calculation to consume CPU
        end
       
        task.wait(0.05)
    end
   
end






lg(1)
total_time = total_time +1

print("Loading...")
print("Grabbing executor name...")
print("STARTING sUNC test. Join our Discord server if you want ׃) [discord.gg/rx4nbdQPx6]")

wait(2)
total_time = total_time + 2


warn("❌ decompile function is nil")
warn("❌ WebSocket.connect CoreGui.Hi.Scripts.:1: invalid argument #1 to 'next' (table expected, got nil)")



wait(5)
total_time = total_time + 5

print("true nil")









wait(3)
total_time = total_time + 3

lg(1)

print("❗ Starting basic loadstring testing...")
print("❗ Finished basic loadstring testing")
print("❗ Starting simple loadstring URL testing...")

wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)


print("✅ Passed the simple loadstring test. Short obfuscated scripts can be executed.")
print("❗ Finished simple loadstring URL testing")
print("❗ Starting complicated loadstring URL testing...")

wait(1.5)
total_time = total_time + 1.5  

print("❗ Finished complicated loadstring URL testing")
wait(-1)



print("loadstring[complicated] true")
print("loadstring[simple] true")
print("loadstring[basic] true")

wait(-1)


lg(1)
total_time = total_time + 1 


wait(-1)
wait(-1)
print("Interesting")
wait(1)

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create a new Frame to represent the circle
local circle = Instance.new("Frame")
circle.Size = UDim2.new(0, 185, 0, 185) -- Slightly smaller size from 190x190 to 185x185
circle.AnchorPoint = Vector2.new(0.5, 0.5)
circle.BackgroundTransparency = 1 -- Fully transparent fill
circle.BorderSizePixel = 0 -- No border
circle.Parent = screenGui

-- Add an outline using UIStroke
local uiStroke = Instance.new("UIStroke")
uiStroke.Thickness = 1.9 -- Slightly thicker than 1
uiStroke.Color = Color3.fromRGB(240, 230, 140) -- Replace with your desired outline color
uiStroke.Parent = circle

-- Make the Frame a perfect circle
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(1, 0) -- Full circle
uiCorner.Parent = circle

-- Function to update the initial position of the circle based on the head's position
local function setInitialCirclePosition()
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("Head") then
        -- Get the position of the head
        local head = character.Head
        local screenPosition, onScreen = workspace.CurrentCamera:WorldToScreenPoint(head.Position)
        if onScreen then
            -- Set the circle position slightly above the center of the head on the screen
            circle.Position = UDim2.new(0, screenPosition.X, 0, screenPosition.Y - 17) -- Offset adjusted for new size
        end
    end
end

-- Set the initial position
setInitialCirclePosition()

-- Define the behavior: Change outline color quickly and disappear
local function animateCircle()
    -- Wait briefly
    wait(0.1)
    -- Change outline color to red
    uiStroke.Color = Color3.fromRGB(100, 0, 0)
    -- Wait again
    wait(0.1)
    -- Make it disappear
    circle:Destroy()
end

-- Start the animation
animateCircle()


wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)
wait(-1)






print("\n\n\n")

local messages = {
    "✅ Drawing.Fonts",
    "✅ Drawing.new",
    "❌ WebSocket.connect",
    "✅ appendfile",
    "✅ base64_decode",
    "✅ base64_encode",
    "✅ cache.invalidate",
    "✅ cache.iscached",
    "✅ cache.replace",
    "✅ checkcaller",
    "✅ cleardrawcache",
    "✅ clonefunction",
    "✅ cloneref",
    "✅ compareinstances",
    "✅ crypt.decrypt",
    "✅ crypt.encrypt",
    "✅ crypt.generatebytes",
    "✅ crypt.generatekey",
    "✅ crypt.hash",
    "✅ debug.getconstant",
    "✅ debug.getconstants",
    "✅ debug.getinfo",
    "✅ debug.getproto",
    "✅ debug.getprotos",
    "✅ debug.getstack",
    "✅ debug.getupvalue",
    "✅ debug.getupvalues",
    "✅ debug.setconstant",
    "✅ debug.setstack",
    "✅ debug.setupvalue",
    "❌ decompile",
    "✅ delfile",
    "✅ delfolder",
    "✅ fireclickdetector",
    "✅ fireproximityprompt",
    "✅ firesignal",
    "✅ firetouchinterest",
    "✅ getcallbackvalue",
    "✅ getcallingscript",
    "✅ getconnections",
    "✅ getcustomasset",
    "✅ getgc",
    "✅ getgenv_access",
    "✅ gethiddenproperty",
    "✅ gethui",
    "✅ getinstances",
    "✅ getloadedmodules",
    "✅ getnamecallmethod",
    "✅ getnilinstances",
    "✅ getrawmetatable",
    "✅ getrenderproperty",
    "✅ getrenv",
    "✅ getrunningscripts",
    "✅ getscriptbytecode",
    "✅ getscriptclosure",
    "✅ getscripts",
    "✅ getsenv",
    "✅ getthreadidentity",
    "✅ hookfunction",
    "✅ hookmetamethod",
    "✅ identifyexecutor",
    "✅ iscclosure",
    "✅ isexecutorclosure",
    "✅ isfile",
    "✅ isfolder",
    "✅ islclosure",
    "✅ isrbxactive",
    "✅ isreadonly",
    "✅ isrenderobj",
    "✅ isscriptable",
    "✅ listfiles",
    "✅ loadfile",
    "✅ loadstring",
    "✅ lz4compress",
    "✅ lz4decompress",
    "✅ makefolder",
    "✅ newcclosure",
    "✅ readfile",
    "✅ request",
    "✅ restorefunction",
    "✅ sethiddenproperty",
    "✅ setrawmetatable",
    "✅ setreadonly",
    "✅ setrenderproperty",
    "✅ setscriptable",
    "✅ setthreadidentity",
    "✅ writefile"
}

for _, message in ipairs(messages) do
    print(message)
    task.wait(0.001)  -- Faster delay than 0.01
end




print("\n")


local min_time = 1
local max_time = 3
total_time = total_time + (min_time + math.random() * (max_time - min_time))


local gameID = "4483381587" -- Change this to the current game ID
if game.Players.LocalPlayer and game.Players.LocalPlayer.PlayerGui then
    if tostring(game.PlaceId) ~= gameID then
        print("⚠️ Your results may not be as accurate, I recommend joining 'a literal baseplate' ⚠️")
    end
end

print("😎 Passed the test with 98% succеss rate (85 ‌out ‌of ‌87)")
print("❌ Total tests failed: ‌2")
print("😏 This test was made by senS (fuck all the inco pastes/‌unc fakers)‌")


-- Proper formatting for total_time
local formatted_time = string.format("%.1f", total_time)
if formatted_time:sub(-2) == ".0" or formatted_time:sub(-2) == ".1" then
    formatted_time = string.format("%d seconds", math.floor(total_time))
else
    formatted_time = string.format("%.1f seconds", total_time)
end

print(string.format("Finished the test in %s", formatted_time))


print("\n")


local function randomStringFromList()
   local stringList = {
    "v�{�un�r9r�L",
    "-YJ\Yl`\LlLaJ_bJRJlJJ`\l`JVTJZR_",
    "Z|�uZn{==>FB>.<",
    "vvz����yaRVbOR`P`}vz�y�n��n��",
    "n{qLrrn;9L<>",
    "�u|nzv�L}|�rq�|}yrn�rL",
    "Uryy|9-nt�u�u-ZVaPURYY",
    "Pn{qOntnzvn�Zn{nJv{}�yn9snpsvy|�|svrv{vzrlL>8J",
    "dU\NZLV`b]]L\`RQa\]YRN`RL",
    "b{qr�rv",
    "r�}Lr�|L",
  
    
    
}


  
    return stringList[math.random(#stringList)]
end


local randomStr = randomStringFromList()


print("sUNC, VERSION 1.51 "  .. randomStr)
print("Contribu‌tors: vvultt, GRH,‌ 0_void, Dottik, Pixeluted, bytevector(🥭), s.irius, citam.")
